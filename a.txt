data = c(15.574078, 20.781279, -1.068638,  8.119399, 14.208912, 15.914175,  1.819644, 31.138053 ,10.528535, 31.982927)

u = 10


sigma = ( 10  / sqrt(10))
  
z = ( mean(data) - u ) / sigma
print(z)

z_alpha = qnorm( 1 - (0.05 / 2))
print(z_alpha)

if(abs(z) > z_alpha){
  print("Null hypothesis is rejected")
}else{
  print("There is no evidence to reject null hypothesis")
}

n = 10
sigma_sample = ( sqrt(var(data))  / sqrt(10))

t = ( mean(data) - u ) / sigma_sample
print(z_s)

t_alpha = qt( (1 - (0.05 / 2)), n-1)
print(t_alpha)



x = c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)
y = c(392.2, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)
d = c()

for(i in seq(0,length(x))){
  d[i] = y[i] - x[i]
}

t.test(x,y, paired = TRUE)




n = 100
p = 0.04
q = 1-p
x = 5
p_cap = x/n
z = ( p_cap - p ) / sqrt(p * q * (1/n))
z
z_alpha = qnorm(1-0.05)
z_alpha

if(z < -z_alpha){
  print("Null hypothesis is rejected")
}else{("There is no evidence to reject null hypothesis")}
  



n1 = 600
n2 = 900
x1 = 400
x2 = 450

p = (x1 + x2) / (n1 + n2)
q = 1-p

p1_cap = x1/n1

p2_cap = x2/n2

z2 = (p1_cap - p2_cap) / sqrt( p * q * ( 1/n1 + 1/n2) )
z2

z2_alpha_lower = qnorm(1-0.05)
z2_alpha_lower
z2_alpha_upper = qnorm(0.05)
z2_alpha_upper
z2_alpha_two_tail = qnorm(0.05/2)
z2_alpha_two_tail

print("Lower Tail Test")
if(z2 < -z2_alpha_lower){
  print("Null hypothesis is rejected")
}else{("There is no evidence to reject null hypothesis")}

print("Upper Tail Test")
if(z2 > z2_alpha_upper){
  print("Null hypothesis is rejected")
}else{("There is no evidence to reject null hypothesis")}

print("Two Tail Test")
if(z2 > z2_alpha_two_tail){
  print("Null hypothesis is rejected")
}else{("There is no evidence to reject null hypothesis")}





prop.test(x = c(400,450), n = c(600,900), alternative  = "two.sided")

prop.test(x = c(400,450), n = c(600,900), alternative  = "less")

prop.test(x = c(400,450), n = c(600,900), alternative  = "greater")


x1 = c(18,19,22,25,27,28,41,45,51,55)
y1 = c(14,15,15,17,18,22,25,25,27,34)

f = var(x1) / var(y1)

var.test(x1, y1, alternative  = "two.sided")

var.test(x1, y1, alternative  = "less")

var.test(x1, y1, alternative  = "greater")

p = 1 - (0.05/2)
na = 9
nd = 9

f_alpha = qf(p,na,nd )
f_alpha


f_alpha_1 = qf(0.05/2,na,nd )
f_alpha_1


if(f < f_alpha){
  print("Null hypothesis is rejected")
}else{("There is no evidence to reject null hypothesis")}

if(f > f_alpha_1){
  print("Null hypothesis is rejected")
}else{("There is no evidence to reject null hypothesis")}








x = c ( 1,2,3,4)
x


m1 = matrix(c(2,4,6,8), nrow = 2, ncol = 2, byrow = FALSE)
m2 = matrix(c(1,3,5,7), nrow = 2, ncol = 2, byrow = TRUE)

m1

x1 = c(1,2,3,4)
x1[2]

mat =  matrix(c(1,2,3,4,5,6,7,8,9,10,11,12), nrow = 3, ncol = 4, byrow = TRUE)
mat

mat[2,3]
mat[,3]
mat[1:3,3]
mat[c(1,3), c(2,4)]

sum = function(x,y){ return(x+y) }
sum(2,6)

check = function(x){
  if(x %% 2 == 0){
    print("Number is even") } 
  else{
    print("Nuber is odd")
  }
}

check(4)
check(3) 

for(i in seq(1,10)){
  print(i)
}


qnorm(1,100,10)



index =  read.csv("advertising.csv",header = TRUE)
head(index,n=1)

dat = read.csv("advertising.csv",header = TRUE)
head(data,n=5)

dat = subset(dat, select = -c(X))

dat[,c(1,4)]

plot(dat$TV, dat$sales)

lmfit = lm(sales~TV, data = dat)

lmfit

summary(lmfit)

df = data.frame( "y" = c(.6,2,1.06,3.44,1.17,3.54),
                 "x" = c(1,1.5,2.1,2.9,3.2,3.9))
df


sales = 7.03259 + (0.047537 * dat$TV)

plot(df$y, df$x)
abline(lmfit)


plot(dat$sales)



lmfit1 = lm(y~x, data = df)
lmfit1

ycap = 0.09488 + (0.76991 * df$x)
plot(df$y)
abline(lmfit1)

anova(lmfit1)


data1 = read.csv("advertising.csv",header = TRUE)
head(data1,n=5)

X = data1[1:50,2:4]
X=data.frame(append(X, c(x1=1), after=0))
X

Y = data1[,4]
Y

library(matlib)
H = as.matrix(X)  %*% inv( t(X) %*% as.matrix(X)) %*% t(X)
diag_H = diag(H)
H
up
dat = data1[1:50,]
o
f_mod = lm(sales~TV+newspaper+radio, data =dat)
f_mod

model_summ = summary(f_mod)
mse = mean(model_summ$residuals^2)
anova(f_mod)
res = resid(f_mod)

"semi-standardized"
semi_ind = res / sqrt(mse)
plot(semi_ind, ylim=c(-3,3), main = "semi-standardized plot")
abline(v=seq(0,nrow(dat)), h = seq(-3,3,0.5))

which(semi_ind<(-3))
which(semi_ind>3)

"studentized test"
t = res / sqrt( mse * (1-diag_H))
plot(t, ylim=c(-3,3), main = "studentized test plot")
abline(v=seq(0,nrow(dat)), h = seq(-3,3,0.5))

"Leverages"
cut_off_point = 3 * (4/50)
plot(diag_H, main = "Leverage")
abline(v = seq(0,nrow(dat)), h = seq(0,0.6,0.1))
which(diag_H>cut_off_point)




